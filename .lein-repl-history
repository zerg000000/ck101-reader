(in-ns 'ck101-reader.core)
(fetch-post "KK")
(use :reload 'ck101-reader.core)
(in-ns 'user)
(use :reload 'ck101-reader.core)
(fetch-post "dk")
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(def post *1)
(first post)
(-> post first :book-name)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(def post *1)
(-> post first :book-name)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(def post *1)
(-> post first :total-page)
(use :reload 'ck101-reader.core)
(-> post first :total-page)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
(fetch-post "https://ck101.com/thread-3832789-1-3.html")
(use :reload 'ck101-reader.core)
exit
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
@(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
@(fetch-post-all 3832789 65)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(use :reload 'ck101-reader.core)
exit
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
exit
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 65)
(fetch-post-all 3832789 3)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 1)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 1)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 1)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 1)
(def data (org.httpkit.client/get "https://ck101.com/thread-3832789-1-3.html"))
(def data (reaver/parse (:body @data)))
data
(def data (org.httpkit.client/get "https://ck101.com/thread-3832789-1-3.html"))
(extract-page-content @data)
(def posts *1)
(count posts)
(count (:text posts))
(keys posts)
(keys (first posts))
(use :reload 'ck101-reader.core)
(extract-page-content @data)
(count (extract-page-content @data))
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 1)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(def c *1)
(clojure.core.async/<!! c)
(use :reload 'ck101-reader.core)
(clojure.core.async/<!! c)
(fetch-post-all 3832789 2)
(clojure.core.async/<!! c)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(def a *1)
(count a)
(fetch-post-all 3832789 65)
(def a *1)
(count a)
(apply concat a)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(def a *1)
(count a)
(first a)
(second a)
(nth 2 a)
(nth a 2)
(nth a 3)
(nth a 4)
(nth a 10)
(nth a 11)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(use :reload 'ck101-reader.core)
(fetch-post-all 3832789 2)
(def a (fetch-post-all 3832789 2))
(-> a first :idx )
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(-> a first :idx )
(-> a second :idx )
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(-> a second :idx )
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(-> a second :idx )
(map :idx a )
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(map :idx a )
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 2))
(map :idx a )
(times (fetch-post-all 3832789 65))
(time (fetch-post-all 3832789 65))
(time (def a (fetch-post-all 3832789 65)))
(use :reload 'ck101-reader.core)
(time (def a (fetch-post-all 3832789 65)))
(use :reload 'ck101-reader.core)
(time (def a (fetch-post-all 3832789 65)))
(use :reload 'ck101-reader.core)
(time (def a (fetch-post-all 3832789 65)))
(use :reload 'ck101-reader.core)
(time (def a (fetch-post-all 3832789 65)))
(use :reload 'ck101-reader.core)
(time (def a (fetch-post-all 3832789 65)))
(count a)
(map :idx a)
(def a (fetch-post-all 3832789 65))
(map :idx a)
(def a (fetch-post-all 3832789 65))
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 65))
(use :reload 'ck101-reader.core)
(def a (fetch-post-all 3832789 65))
(count a)
(use :reload 'ck101-reader.core)
(fetch-all (map (partial get-page-link 3832789) (range 65)) extract-page-content 100)
(#"dg" "kjdfkdjf")
(.matcher #"dg" "kjdfkdjf")
(re-find #"dg" "kjdfkdjf")
(re-find #"dg" "kjdfkdgjf")
(re-find #"\d" "kj1dfkd2gjf")
(re-find #"(\d)" "kj1dfkd2gjf")
(re-find #"(\d)\w+(\d)" "kj1dfkd2gjf")
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(clojure.core.async/pipeline 1 (chan) (map println) (chan))
(clojure.core.async/pipeline 1 (clojure.core.async/chan) (map println) (clojure.core.async/chan))
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
(use :reload 'ck101-reader.core)
(fetch-all2 ["https://ck101.com/thread-3832789-1-3.html" "https://ck101.com/thread-3832789-1-3.html"] extract-page-content 200)
exit
(use :reload 'ck101-reader.core)
(extract-post-info (slurp "testResources/test1.html") "thread-1-1.html")
(use :reload 'ck101-reader.core)
(extract-post-info (slurp "testResources/test1.html") "thread-1-1.html")
(use :reload 'ck101-reader.core)
(extract-post-info (slurp "testResources/test1.html") "thread-1-1.html")
exit
(use :reload 'ck101-reader.core)
(fetch-all (map (partial get-page-link 3832789) (range 65)) extract-page-content 100)
exit
(use :reload 'ck101-reader.core)
(fetch-all-sync (map (partial get-page-link 3832789) (range 65)) extract-page-content 100)
exit
